syntax = "proto3";

option go_package = ".;pb";

package seabird;

// Identity is included in every message that requires auth. One AuthMethod at a
// time is supported. For now, the only supported method is a token. You can
// obtain a full Identity from the Register method.
message Identity {
  oneof AuthMethod {
    string token = 1;
  }
}

service Seabird {
  rpc Register(RegisterRequest) returns (RegisterResponse) {}

  rpc EventStream(EventStreamRequest) returns (stream SeabirdEvent) {}

  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse) {}
  rpc SendRawMessage(SendRawMessageRequest) returns (SendRawMessageResponse) {}

  rpc ListChannels(ListChannelsRequest) returns (ListChannelsResponse) {}
  rpc GetChannelInfo(ChannelInfoRequest) returns (ChannelInfoResponse) {}
  rpc SetChannelInfo(SetChannelInfoRequest) returns (SetChannelInfoResponse) {}
  rpc JoinChannel(JoinChannelRequest) returns (JoinChannelResponse) {}
  rpc LeaveChannel(LeaveChannelRequest) returns (LeaveChannelResponse) {}

  // TODO: add GetPluginInfo
  // TODO: add ListPlugins
}

message RegisterRequest {
  string plugin = 1;
}

message RegisterResponse {
  Identity identity = 1;
}

message EventStreamRequest {
  Identity identity = 1;

  repeated CommandRegistration commands = 2;
}

message CommandRegistration {
  string name = 1;
  string shortHelp = 2;
  string fullHelp = 3;
}

message SeabirdEvent {
  oneof Event {
    MessageEvent message = 1;
    PrivateMessageEvent privateMessage = 2;
    MentionEvent mention = 3;
    CommandEvent command = 4;
  }
}

message MessageEvent {
  string replyTo = 1;
  string sender = 2;
  string message = 3;
}

message PrivateMessageEvent {
  string replyTo = 1;
  string sender = 2;
  string message = 3;
}

message MentionEvent {
  string replyTo = 1;
  string sender = 2;
  string message = 3;
}

message CommandEvent {
  string replyTo = 1;
  string sender = 2;
  string command = 3;
  string arg = 4;
}

message SendMessageRequest {
  Identity identity = 1;

  string target = 2;
  string message = 3;
}

message SendMessageResponse {}

message SendRawMessageRequest {
  Identity identity = 1;

  string command = 2;
  repeated string params = 3;
}

message SendRawMessageResponse {}

message ListChannelsRequest {
  Identity identity = 1;
}

message ListChannelsResponse {
  repeated string names = 1;
}

message ChannelInfoRequest {
  Identity identity = 1;

  string name = 2;
}

message User {
  string nick = 1;
}

message SetChannelInfoRequest {
  Identity identity = 1;

  string name = 2;
  string topic = 3;
}

message SetChannelInfoResponse {}

message ChannelInfoResponse {
  string name = 1;
  string topic = 2;
  repeated User users = 3;
}

message JoinChannelRequest {
  Identity identity = 1;

  string target = 2;
}

message JoinChannelResponse {}

message LeaveChannelRequest {
  Identity identity = 1;

  string target = 2;
  string message = 3;
}

message LeaveChannelResponse {}
